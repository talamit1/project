; ((lambda (x) (begin (set! x 5) x)) 3)
; ;((lambda (x . y) y) 1 2 3 4 5 6)
; (define a 8)
; a
; ; (set! a 55)
; ; a
;((lambda (x . y) y )  1 2 3 34 22)
; ((lambda a a)1 2 3 4 54 54 6 346 33546 6 )
; ((lambda a a)1 2 3 4 )
 ;((lambda (a) (+ a 44)) 1 2 3 4 )
; ((lambda (b . a) a)1 2 3 4 )
; (+ 1 2 4 34 425 34 534 53 4534 5 3456 546 456 3456 )
; ; (letrec(
; ;     (func-1 (lambda() (if (procedure? func-2) 'passed 'fail)))
; ;     (func-2 (lambda(y) y)))
; ;     func-1)
;(((lambda (x) (lambda ( y ) (set! x 1) x)) 4) 5)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(string? "tttt")
; ;;;;;;;;;;;;;;;;;; denom + numer ;;;;;;;;;;;;;;;
(numerator  0/6)
(numerator  3/6)
(numerator  5)
(numerator  123/435)
(denominator 22/45)
(denominator 45)
(denominator 0/6)

;;;;;; plus tests
(+ 44 55)
(+ 2 3 5 6/4 7/9)
(+ 7/9)
(+)
(+ 7/7)
(+ 3/4 1/4)
(+ -7/2 -1/2)

;;;;;; minus tests
(- 2 3 4)
(- 2 3 5 6/4 7/9)
(- 7/9)
(- 5)
(- 7/7)
(- 3/4 1/4)
(- -7/2 -1/2)
(- 4 1/2)

;;;;;; mul tests
(* 44 55)
 (* 2 3 5 6/4 7/9)
 (* 7/9)
 (*)
 (* 7/7)
 (* 3/4 1/4)
 (* -7/2 -1/2)

;;;;;; mul tests
(/ 44 55)
 (/ 2 3 5 6/4 7/9)
 (/ 7/9)
 ;(/)
 (/ 7/7)
 (/ 3/4 1/4)
 (/ -7/2 -1/2)

;;;;;;;;;;;;;;;;;;; vector tests ;;;;;;;;;;;;;;;;
(vector-length (make-vector 7 1))
(not 1)
(not 2)
(not #f)

(vector-ref #(1 2 3 4) 2)
(vector-ref #(1 2 3 4) 1)
(make-vector 0 5)
(make-vector 2 5)
(vector 5 6 46767 7)
(vector)